{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","_ref","pageContext","data","location","tag","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","tagHeader","Glamor","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_5__","a","_components_container__WEBPACK_IMPORTED_MODULE_4__","map","_ref2","node","title","frontmatter","slug","fields","key","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","to","propTypes","prop_types__WEBPACK_IMPORTED_MODULE_2___default","shape","string","isRequired","number","arrayOf","__webpack_exports__","default","s","pageQuery","call","this"],"mappings":"8MAOMA,EAAO,SAAAC,GAAqC,IAAlCC,EAAkCD,EAAlCC,YAAaC,EAAqBF,EAArBE,KAAMC,EAAeH,EAAfG,SACzBC,EAAQH,EAARG,IADwCC,EAElBH,EAAKI,kBAA3BC,EAFwCF,EAExCE,MAAOC,EAFiCH,EAEjCG,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAA,QADa,iBAEEJ,EAFF,IAIf,OACEM,EAAAC,cAACC,EAAAC,GAAOV,SAAUA,GAChBO,EAAAC,cAACG,EAAAD,EAAD,KACEH,EAAAC,cAAA,UAAKF,GACLC,EAAAC,cAAA,UACGJ,EAAMQ,IAAI,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAEKC,EAEbD,EAFFE,YAAeD,MACLE,EACRH,EADFI,OAAUD,KAEZ,OACEV,EAAAC,cAAA,MAAIW,IAAKF,GACPV,EAAAC,cAACY,EAAAC,MAAKC,GAAIL,GAAOF,OAKzBR,EAAAC,cAACY,EAAAC,MAAKC,GAAG,cAAT,eAMR1B,EAAK2B,WACHzB,YAAa0B,EAAAd,EAAUe,OACrBxB,IAAKuB,EAAAd,EAAUgB,OAAOC,aAExB5B,KAAMyB,EAAAd,EAAUe,OACdtB,kBAAmBqB,EAAAd,EAAUe,OAC3BpB,WAAYmB,EAAAd,EAAUkB,OAAOD,WAC7BvB,MAAOoB,EAAAd,EAAUmB,QACfL,EAAAd,EAAUe,OACRX,KAAMU,EAAAd,EAAUe,OACdT,YAAaQ,EAAAd,EAAUe,OACrBV,MAAOS,EAAAd,EAAUgB,OAAOC,iBAG3BA,iBAMXG,EAAAC,QAAAC,EAEO,IAAMC,EAAS,aAAAC,KAAAC,KAAAzB,EAAA","file":"component---src-templates-tags-js-a512221858212491dac9.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Container from \"../components/container\"\nimport Layout from \"../components/layout\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? `` : `s`\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout location={location}>\n      <Container>\n        <h1>{tagHeader}</h1>\n        <ul>\n          {edges.map(({ node }) => {\n            const {\n              frontmatter: { title },\n              fields: { slug },\n            } = node\n            return (\n              <li key={slug}>\n                <Link to={slug}>{title}</Link>\n              </li>\n            )\n          })}\n        </ul>\n        <Link to=\"/blog/tags\">All tags</Link>\n      </Container>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { tags: { in: [$tag] } }\n        fileAbsolutePath: { regex: \"/docs.blog/\" }\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}