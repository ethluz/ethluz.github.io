{"data":{"site":{"siteMetadata":{"title":"地球太空船码农"}},"allMarkdownRemark":{"totalCount":3,"edges":[{"node":{"excerpt":"熟悉nodejs的同学或者使用过前端react vue等的.都知道npm yarn这样的包管理神器.而切换node全局版本也可以使用nvm.当我们创建一个项目目录执行,npm init 即拥有了一个当前目录的依赖包环境.执行yarn add 或npm install即可安装相应的依赖库.  而python早期有pip,可以在全局安装依赖库,后来又拥有了virtualenv这种隔离的环境.但是都无法做到做到nodejs的方便.但是技术总是会进化的: 开始之前我们先介绍一下pipenv,pyenv以及autoenv,可对比nodejs: \n pyenv: 类似于nvm用于安装不同版本的python语言.甚至pyenv命令也和nvm类似.\n Pipenv: 用于取代pip和virtualenv. 她比pip拥有更强大的包管理功能.有具有virtualenv…","fields":{"slug":"/blog/python-pipenv-pyenv/"},"frontmatter":{"title":"python的多语言版本和依赖包&隔离环境管理:pipenv+pyenv+autoenv"}}},{"node":{"excerpt":"使用docker的流程 1.cd到项目目录下(例如web网站根目录,nodejs就是package.json所在目录). 2.编写Dockerfile(后面回介绍dockerfile的使用) 3.创建image: (在Dockerfile所在的目录下)\t 4.运行容器: 常用命令 查看daocker正在运行的容器:  关闭正在运行的容器 : 执行容器内的命令: python的docker环境: Python的另一个例子,参考官方文档:\n https://docs.docker-cn.com/get-started/part2/ nodejs的docker环境 以我在github上的koa2-mvp为例(一个集成了数据库,api,系统日志,错误处理,ES6)为一体的项目框架). 执行容器内的命令,查看容器的nodejs版本: 辅助文档: docker…","fields":{"slug":"/blog/docker-learndocker/"},"frontmatter":{"title":"docker的使用"}}},{"node":{"excerpt":"必备知识点: git流程: 仓库&分支\n仓库:通常有一个链接地址,例如github的一个项目就是一个仓库:\n我们推送本地仓库提交的代码时,通常是git push origin head:master 即是将代码提交到名为origin的远程仓库. 分支:一个仓库通常有多个分支,主要用途,区分开发环境,正式环境等.以及发布不同的开源版本. **关于HEAD: **我们push时,git push origin HEAD:master 其中的HEAD实际上是指向默认分支的,他指向你git checkout xx中的xx. 场景化&命令组合 日常提交代码必备流程: 当然 git add . 和git commit 也可以简写为: 1.可以先clone空代码库,再提交代码: 2.先初始化,再提交(适用于代码库空置) 如何恢复之前的版本:(writing…) 连接多个远程仓库,并使用: 首先push…","fields":{"slug":"/blog/git-use/"},"frontmatter":{"title":"Git的使用指南"}}}]}},"pageContext":{"tag":"后端"}}