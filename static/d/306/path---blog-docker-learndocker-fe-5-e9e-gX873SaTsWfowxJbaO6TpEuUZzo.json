{"data":{"markdownRemark":{"id":"a57a009e-ccd4-58ae-9fa8-a57e6300ce09","html":"<h1>docker使用,Python+nodejs为例</h1>\n<h4>使用docker的流程</h4>\n<ul>\n<li>\n<p>1.cd到项目目录下(例如web网站根目录,nodejs就是package.json所在目录).</p>\n</li>\n<li>\n<p>2.编写Dockerfile(后面回介绍dockerfile的使用)</p>\n</li>\n<li>\n<p>3.创建image: (在Dockerfile所在的目录下)\t</p>\n<pre><code class=\"language-json\">    docker build -t  \\{image\\_name} .  \n    ```\n\n```bash\n    docker images #可查看有哪些image\n    ```\n</code></pre>\n</li>\n<li>\n<p>4.运行容器:</p>\n<pre><code class=\"language-bash\">    # 控制台执行\n    docker run -p {系统端口}:{容器端口} {image\\_name} . \n    # 后台运行\n    docker run -d -p {系统端口}:{容器端口} {image\\_name} . \n    ```\n</code></pre>\n</li>\n</ul>\n<h4>常用命令</h4>\n<p>查看daocker正在运行的容器: </p>\n<pre><code class=\"language-bash\">docker ps  \nCONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                  NAMES\n0219df69bd3d        binstd-service      \"pm2-runtime app.js\"   45 seconds ago      Up 44 seconds       0.0.0.0:80->3000/tcp   competent_raman\n</code></pre>\n<p>关闭正在运行的容器 :</p>\n<pre><code class=\"language-bash\"> docker stop  CONTAINER_ID #上面 docker ps看到的 containid\n</code></pre>\n<p>执行容器内的命令:</p>\n<pre><code class=\"language-bash\">#后面的cmd可以是任意的shell命令\nsudo docker exec -it CONTAINER_ID  cmd.. \n</code></pre>\n<h4>python的docker环境:</h4>\n<p>Python的另一个例子,参考官方文档:\n<a href=\"https://docs.docker-cn.com/get-started/part2/\">https://docs.docker-cn.com/get-started/part2/</a></p>\n<h4>nodejs的docker环境</h4>\n<p>以我在github上的koa2-mvp为例(一个集成了数据库,api,系统日志,错误处理,ES6)为一体的项目框架).</p>\n<pre><code class=\"language-bash\"># 将官方 node:carbon 运行时用作父镜像\nFROM node:carbon\n\n# 收到添加pm2的方式,注意看结尾的CMD\n# 也可以查看文档: http://pm2.keymetrics.io/docs/usage/docker-pm2-nodejs/\nRUN npm install pm2 -g\n\n# 设置环境变量\nENV NODE_ENV=production\n\n\n\n# 将工作目录设置为 /app\nWORKDIR /app\n\n# 将当前目录内容复制到位于 /app  中的容器中\nADD . /app\n\n# 如果你需要构建生产环境下的代码，请使用：\n# RUN npm install --only=production\nRUN npm install\n\n# 使端口 3000 可供此容器外的环境使用\nEXPOSE 3000\n\n# 在容器启动时运行 app.py\n# CMD [\"python\", \"app.py\"]\n# CMD [ \"npm\", \"prd\" ]\nCMD [\"pm2-runtime\", \"app.js\"]\n</code></pre>\n<p>执行容器内的命令,查看容器的nodejs版本:</p>\n<pre><code class=\"language-bash\">sudo docker exec -it 0219df69bd3d node -v \n</code></pre>\n<p>辅助文档:</p>\n<h4>docker必备命令</h4>\n<p><em>使用容器中的命令</em></p>\n<p><em>保证docker的守护进程</em></p>\n<pre><code class=\"language-js\"> --restart=always\n</code></pre>\n<p>附文档:\ndocker中文文档:\n<a href=\"https://docs.docker-cn.com/\">https://docs.docker-cn.com/</a></p>\n<p>docker中使用pm2+nodejs (pm2本身是守护进程+多进程分配.因此难以抛弃,因为docker开多个不同端口容器太占据资源)\n<a href=\"http://pm2.keymetrics.io/docs/usage/docker-pm2-nodejs/\">http://pm2.keymetrics.io/docs/usage/docker-pm2-nodejs/</a></p>\n<p>Dockerfile</p>","frontmatter":{"date":"December 17, 2017","title":"docker的使用","description":"docker安装,docker+nodejs,doker+python爬虫的使用案例,docker文档资源等","tags":["docker","服务端"]}}},"pageContext":{"id":"a57a009e-ccd4-58ae-9fa8-a57e6300ce09"}}