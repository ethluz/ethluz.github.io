{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"理论: 以太坊1.0下采用pow共识机制,每个节点,都有区块链的数据,而在设计时考虑到不同的需求,硬件环境等,特提供了3种方式,允许节点不必完整区块数据. 同步模式: fast:  \n启动快速区块同步模式，在同步到最新区块后，转化为正常区块同步模式. full: \n同步所有区块，会拥有完整的区块链数据. Light: \n轻节点模式，只会同步区块头信息，可以完成基本的命令操作. 安装方式 官方网站: https://geth.ethereum.org/downloads/ \nUbuntu包: Mac下 homebrew: docker?(文章后面有docker的讲解) 后台运行 why? \n后台允许,允许你断开和服务器的连接(假设你的geth安装在某个主机上)后,依旧在运行同步数据.\n 方式1:nohup *方式2:pm2  * 后台运行如何启动console(和geth交互,调用geth…","id":"fa55ca1c-b380-529a-9823-a9e42a0dadec","fields":{"slug":"/blog/eth1.0-client-geth-use/"},"frontmatter":{"title":"以太坊1.0下,Geth的安装&使用&文档资源","templateKey":"blog-post","date":"December 17, 2018"}}},{"node":{"excerpt":"React是基于组件，虚拟dom的前端开发框架。 所谓基于组件即react中是一个组件嵌套一个组件，组件可复用。所谓虚拟dom，既react中的视图，是虚拟的，全部是js，而非html。 初识组件 一个组件的构成： 第一行中，import from 是es6中的语法，具体es6的教程学习，可参考廖雪峰大神的博客。\n语法中的class也一样是es6. 可以类比其他面向对象的语言。 其中的render方法，用于加载视图，在return中写入JSX。 关于jsx 可参考 \nJsx日常使用需注意要点：\n其实就是html的语法，但直接复制html是否可以？不行。需要做两步转换：1.class变成className 2.标签结尾用/闭合。 如上面的代码，仔细看input，就是在结尾加入了，“/”。在看看className.\n当然其中也可以使用js的变量或调用当前组件class…","id":"1f864f41-4336-5ff1-80c8-f2f538e888f2","fields":{"slug":"/blog/react-for-dapp-1-helloworld/"},"frontmatter":{"title":"react开发入门:1.入门react项目创建,代码结构","templateKey":"blog-post","date":"December 17, 2018"}}},{"node":{"excerpt":"熟悉nodejs的同学或者使用过前端react vue等的.都知道npm yarn这样的包管理神器.而切换node全局版本也可以使用nvm.当我们创建一个项目目录执行,npm init 即拥有了一个当前目录的依赖包环境.执行yarn add 或npm install即可安装相应的依赖库.  而python早期有pip,可以在全局安装依赖库,后来又拥有了virtualenv这种隔离的环境.但是都无法做到做到nodejs的方便.但是技术总是会进化的: 开始之前我们先介绍一下pipenv,pyenv以及autoenv,可对比nodejs: \n pyenv: 类似于nvm用于安装不同版本的python语言.甚至pyenv命令也和nvm类似.\n Pipenv: 用于取代pip和virtualenv. 她比pip拥有更强大的包管理功能.有具有virtualenv…","id":"d0e3d439-8a0a-50bc-873a-ba6e503eeb12","fields":{"slug":"/blog/python-pipenv-pyenv/"},"frontmatter":{"title":"python的多语言版本和依赖包&隔离环境管理:pipenv+pyenv+autoenv","templateKey":"blog-post","date":"December 17, 2018"}}},{"node":{"excerpt":"使用docker的流程 1.cd到项目目录下(例如web网站根目录,nodejs就是package.json所在目录). 2.编写Dockerfile(后面回介绍dockerfile的使用) 3.创建image: (在Dockerfile所在的目录下)\t 4.运行容器: 常用命令 查看daocker正在运行的容器:  关闭正在运行的容器 : 执行容器内的命令: python的docker环境: Python的另一个例子,参考官方文档:\n https://docs.docker-cn.com/get-started/part2/ nodejs的docker环境 以我在github上的koa2-mvp为例(一个集成了数据库,api,系统日志,错误处理,ES6)为一体的项目框架). 执行容器内的命令,查看容器的nodejs版本: 辅助文档: docker…","id":"702c5cff-099b-5354-b43c-0a287344b871","fields":{"slug":"/blog/docker-learndocker/"},"frontmatter":{"title":"docker的使用","templateKey":"blog-post","date":"December 17, 2017"}}},{"node":{"excerpt":"必备知识点: git流程: 仓库&分支\n仓库:通常有一个链接地址,例如github的一个项目就是一个仓库:\n我们推送本地仓库提交的代码时,通常是git push origin head:master 即是将代码提交到名为origin的远程仓库. 分支:一个仓库通常有多个分支,主要用途,区分开发环境,正式环境等.以及发布不同的开源版本. **关于HEAD: **我们push时,git push origin HEAD:master 其中的HEAD实际上是指向默认分支的,他指向你git checkout xx中的xx. 场景化&命令组合 日常提交代码必备流程: 当然 git add . 和git commit 也可以简写为: 1.可以先clone空代码库,再提交代码: 2.先初始化,再提交(适用于代码库空置) 如何恢复之前的版本:(writing…) 连接多个远程仓库,并使用: 首先push…","id":"a8410122-0885-5d07-9b3b-b147397c2103","fields":{"slug":"/blog/git-use/"},"frontmatter":{"title":"Git的使用指南","templateKey":"blog-post","date":"December 17, 2017"}}},{"node":{"excerpt":"Iterm2 \n到官网,自己查询安装方式. *zsh *\nmac通常都自带,如果没有zsh,则执行如下命令安装:\nbrew install zsh 随后,要安装oh-my-zsh:(用于管理zsh)\nsh -c \"$(curl -fsSL  https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh )\"#设置iterm的主题: 设置主题 iTerm2 > Preferences > Profiles > Colors Tab 打开 Color Presets... 下拉到最底下, 从选项里选择 Import...  然后选择主题所在位置,例如我用的: Dracula.itermcolors  在 Ps:我个人喜欢的主题:\n https://draculatheme.com…","id":"8b8b534a-94ca-5e3c-90c5-55eef0ad5825","fields":{"slug":"/blog/iterm2-mac/"},"frontmatter":{"title":"iterm2 简易玩法","templateKey":"blog-post","date":"December 17, 2017"}}},{"node":{"excerpt":"如题,koa本身只包含基础的接受请求返还请求.所有的其他功能都通过洋葱中间件模型实现.\n我刚好实现了一个扩展koa2本身功能,满足服务端快速开发的框架.在我看来完备的服务端开发框架,需要满足:快速的数据库改建,对用户请求类型参数的完整的处理,系统日志,异常错误的处理.一定程度的分层是必须的,规划统一的开发方式也是必须的. 0.前置知识点 koa的基础知识,例如:ctx作用.\nEs6语法:知道回调函数,知道primise的用法,例如then.最新的同步异步处理,如\nNvm安装配置,npm的常用命令.  1.初始化koa2 前置条件:安装nvm(nodejs多版本神器),然后切换版本,到8.11以上版本.\n 创建新目录,然后npm包创建项目:(你也可以使用yarn) 项目初始化完成后,会生成package.json.于是你应该就是明白,这个json目录咋回事了..然后以后每次使用npm…","id":"2b4eaaab-506e-59d4-b5f2-15f5a9e31493","fields":{"slug":"/blog/use-koa2-for-restfulapi-server/"},"frontmatter":{"title":"把koa2扩展成一个完备服务端api开发框架","templateKey":"blog-post","date":"December 17, 2017"}}},{"node":{"excerpt":"终极vim解决方案: 方法1 粘贴最优的配置 https://github.com/amix/vimrc \n其提供了基础版本和需要安装的awesome版本. 其提供的基础版(不需要安装任何插件,只需要把下面的配置粘贴到〜/ .vimrc 即可)\n当然你也可以选择从github复制:\n https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim 方法2 neovim 据说neovim作者当初对vim提出改进意见,被拒绝了,然后重新开发了neovim.目前也已相当成熟.github的star数量是很好的说明.\n需要注意neovim的插件和vim本身不兼容.\n 看看如何安装吧 \nMac下 其他(还是看文档吧)\n https://github.com/neovim/neovim/wiki/Installing-Neovim…","id":"729bdc29-b93e-5b5e-b391-203bd5c7bf6c","fields":{"slug":"/blog/vim-setting-way/"},"frontmatter":{"title":"Vim 标准化配置","templateKey":"blog-post","date":"October 17, 2017"}}}]}},"pageContext":{}}