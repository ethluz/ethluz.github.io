{"data":{"markdownRemark":{"id":"2a88ab33-435f-5648-b49b-da930d0f9ca4","html":"<h1></h1>\n<h2>必备知识点:</h2>\n<p>git流程:</p>\n<p>仓库&#x26;分支\n仓库:通常有一个链接地址,例如github的一个项目就是一个仓库:\n我们推送本地仓库提交的代码时,通常是git push origin head:master 即是将代码提交到名为origin的远程仓库.</p>\n<p>分支:一个仓库通常有多个分支,主要用途,区分开发环境,正式环境等.以及发布不同的开源版本.</p>\n<p>**关于HEAD: **我们push时,git push origin HEAD:master 其中的HEAD实际上是指向默认分支的,他指向你git checkout xx中的xx.</p>\n<h2>场景化&#x26;命令组合</h2>\n<h4>日常提交代码必备流程:</h4>\n<pre><code class=\"language-js\">git status  //查看可提交的文件\ngit add .//也可以是git add xx.file 其中 git add .是添加所有内容\ngit commit -m '备注'  //将会提交git add的内容. -m后面的备注将记录到git中.\n\ngit push 仓库名称 本地分支:远程分支 //将本地分支提交到指定仓库的远程分支上.\n</code></pre>\n<p>当然 git add . 和git commit 也可以简写为:</p>\n<pre><code class=\"language-js\">git commit -a -m 'added a new footer [issue 53]'\n</code></pre>\n<p><em>1.可以先clone空代码库,再提交代码:</em></p>\n<pre><code class=\"language-js\">git status  //查看可提交的文件\n \ngit clone https://github.com/facebook/react/\n\n git add .//也可以是git add xx.file 其中 git add .是添加所有内容\n\n git commit -m '备注' //将会提交git add的内容. -m后面的备注将记录到git中.\n\n git push 仓库名称 本地分支:远程分支 //将本地分支提交到指定仓库的远程分支上.\n</code></pre>\n<p><em>2.先初始化,再提交(适用于代码库空置)</em></p>\n<pre><code class=\"language-js\"> git init\n\n git add .  \n\n git commit -m '备注'  //将会提交git add的内容. -m后面的备注将记录到git中.\n git push 仓库名称 本地分支:远程分支 //将本地分支提交到指定仓库的远程分支上.\n</code></pre>\n<h4>如何恢复之前的版本:(writing…)</h4>\n<pre><code class=\"language-js\">git log //查看之前版本\ngit reset //恢复\ngit push [仓库] [本地分支]:[远程分支]\n</code></pre>\n<h4>连接多个远程仓库,并使用:</h4>\n<p>首先push第一个仓库：</p>\n<pre><code class=\"language-js\">git remote add  {仓库名1}  {giturl}\n</code></pre>\n<p>其次,push第二个仓库</p>\n<pre><code class=\"language-js\">git remote add  {仓库名2}  {giturl}\n</code></pre>\n<h4>避免提交的代码&#x26;忽略的内容:</h4>\n<p>根目录下创建文件*.gitignore * 并添加内容,例如:</p>\n<pre><code class=\"language-bash\"># 此为注释 – 将被 Git 忽略\n# 忽略所有 .a 结尾的文件\n*.a\n# 但 lib.a 除外\n!lib.a\n# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n/TODO\n# 忽略 build/ 目录下的所有文件\nbuild/\n\n#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\ndoc/*.txt\n# 忽略 doc/目录下所有扩展名为 txt 的文件\ndoc/**/*.txt\n</code></pre>\n<p><em>git clone:</em>  clone指定分支\ngit clone -b  {分支名称}   {url}\n例如:(将会clone react的facts分支)</p>\n<pre><code class=\"language-js\">git clone -b facts https://github.com/facebook/react/\n</code></pre>\n<h4>必备查询:</h4>\n<p>查询文件更改状态</p>\n<pre><code class=\"language-js\">git status\n</code></pre>\n<p>最近提交记录</p>\n<pre><code class=\"language-js\">git log\n</code></pre>\n<p>查看远程分支:</p>\n<pre><code class=\"language-js\">git remote -v\n</code></pre>\n<p>查看远程仓库全部信息:</p>\n<pre><code class=\"language-js\">git remote show [remote-name] //查看远程仓库remote-name的信息\n</code></pre>\n<p>修改远程仓库名称</p>\n<pre><code class=\"language-bash\">git remote rename [remote-name-old]  [remote-name-new] \n</code></pre>\n<p>删除远程仓库 </p>\n<pre><code class=\"language-bash\">git remote rm [remote-name]\n</code></pre>\n<p>新建分支</p>\n<pre><code class=\"language-bash\">git branch [branch-name]\n</code></pre>\n<p>查看所有分支:</p>\n<pre><code class=\"language-bash\">git branch\n</code></pre>\n<p>合并分支</p>\n<pre><code class=\"language-bash\">//将branch-name1合并到branch-name2\ngit checkout  [branch-name1] \ngit merge [branch-name2]\n</code></pre>\n<h4>推荐你去阅读官方</h4>\n<p><a href=\"https://git-scm.com/book/zh/v2\">https://git-scm.com/book/zh/v2</a></p>","frontmatter":{"date":"December 17, 2017","title":"Git的使用指南","description":"git使用备忘录,作为即查的git使用指南够用,但如果作为入门学习或深入.还是看官方文档吧.","tags":["工具","后端","git"]}}},"pageContext":{"id":"2a88ab33-435f-5648-b49b-da930d0f9ca4"}}