{"data":{"markdownRemark":{"id":"58c191fb-5cd2-5af0-a321-005182b633f2","html":"<p>熟悉nodejs的同学或者使用过前端react vue等的.都知道npm yarn这样的包管理神器.而切换node全局版本也可以使用nvm.当我们创建一个项目目录执行,npm init 即拥有了一个当前目录的依赖包环境.执行yarn add 或npm install即可安装相应的依赖库. </p>\n<p>而python早期有pip,可以在全局安装依赖库,后来又拥有了virtualenv这种隔离的环境.但是都无法做到做到nodejs的方便.但是技术总是会进化的:</p>\n<p><em>开始之前我们先介绍一下pipenv,pyenv以及autoenv,可对比nodejs:</em>\n<em>pyenv:</em>类似于nvm用于安装不同版本的python语言.甚至pyenv命令也和nvm类似.\n<em>Pipenv:</em>用于取代pip和virtualenv. 她比pip拥有更强大的包管理功能.有具有virtualenv的隔离沙盒环境.它很好的将这两者合二为一了.但是pipenv依旧有缺陷,我们进入项目目录,无法自动切换沙盒环境.找到对应的安装依赖.\n<em>Autoenv:</em>autoenv正式解决pipenv唯一没有解决的难题,无需手动激活虚拟环境.进入目录即可激活!</p>\n<h2>一.pipenv+autoenv+pyenv的安装</h2>\n<h4>安装pipenv</h4>\n<pre><code class=\"language-bash\">pip install pipenv\n</code></pre>\n<h4>安装autoenv</h4>\n<p><em>Mac OS X 使用 Homebrew 安装</em></p>\n<pre><code class=\"language-bash\">$ brew install autoenv\n# bash 使用这条命令\n$ echo \"source $(brew --prefix autoenv)/activate.sh\" >> ~/.bash_profile\n# zsh 使用这条命令\n$ echo \"source $(brew --prefix autoenv)/activate.sh\" >> ~/.zshrc\n</code></pre>\n<p><em>pip安装</em></p>\n<pre><code class=\"language-bash\">$ pip install autoenv\n# bash 使用这条命令\n$ echo \"source `which activate.sh`\" >> ~/.bashrc\n# zsh 使用这条命令\n$ echo \"source `which activate.sh`\" >> ~/.zshrc\n</code></pre>\n<p><em>git安装</em></p>\n<pre><code class=\"language-bash\">$ git clone git://github.com/kennethreitz/autoenv.git ~/.autoenv\n# bash 使用这条命令\n$ echo 'source ~/.autoenv/activate.sh' >> ~/.bashrc\n# zsh 使用这条命令\n$ echo 'source ~/.autoenv/activate.sh' >> ~/.zshrc\n</code></pre>\n<h4>安装pyenv</h4>\n<p> github（有安装教程）：<a href=\"https://github.com/pyenv/pyenv\">https://github.com/pyenv/pyenv</a>\n或者使用brew：</p>\n<pre><code class=\"language-bash\">brew update\nbrew install pyenv\n</code></pre>\n<p>接着,<em>一定要配置环境变量</em>,在.zshrc, bash_profile中添加:(如果不添加,pipenv将无法识别python版本)</p>\n<pre><code class=\"language-bash\">export PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\n</code></pre>\n<h2>二.pipenv+autoenv+pyenv的使用</h2>\n<h4>设置python版本-pyenv使用:</h4>\n<pre><code class=\"language-bash\">#安装3.6python\npyenv install 3.7.0\n #查看可安装的版本\npyenv install --list\n\n# 显示安装的python版本\npyenv versions\n\n#查看当前python版本\npyenv version\n</code></pre>\n<h4>pipenv的基本使用</h4>\n<p>进入空目录,如果系统没有想要的python版本,需要用pyenv安装python版本.如果系统已有该版本,则使用pipenv 创建该版本的虚拟环境:</p>\n<pre><code class=\"language-bash\"> #查看系统中的python版本:\npyenv versions\n\n* system (set by /Users/luz/.pyenv/version)\n  3.6.5\n  3.7.0\n # 使用其中一个版本创建当前目录的沙盒环境\npipenv --python 3.6.5\n</code></pre>\n<p>如果不需要切换语言版本,也可以这么创建沙盒环境:</p>\n<pre><code class=\"language-bash\">  \npipenv install\n</code></pre>\n<p>这样只是创建了一个类型于node中的package.json的文件:\nPipfile  Pipfile.lock等文件.这类似npm init命令.当然有所区别,python需要手动激活Pipfile中配置的依赖关系环境:</p>\n<pre><code class=\"language-bash\"> #通过这个命令激活\npipenv shell\n</code></pre>\n<p>激活才算是进入一个沙盒中的依赖环境.然后可以用pipenv 代替pip去安装当前沙盒环境的依赖包:</p>\n<pre><code class=\"language-bash\"> #通过这个命令激活\npipenv install flask django\n</code></pre>\n<p>是的flask,django都只属于当前这个沙盒环境.不信,你在pipenv后看看Pipfile中多了什么!</p>\n<h4>如何省掉手动激活(进入目录就激活虚拟环境)?—— autoenv的用法:</h4>\n<p>当我们在运行pipenv shell去激活沙盒环境时,系统会返回这个环境的位置:</p>\n<pre><code class=\"language-bash\">pipenv shell\nLaunching subshell in virtual environment…\n . /Users/luz/.local/share/virtualenvs/flask-site-9FpTxb5n/bin/activate\n</code></pre>\n<p>使用echo命令把这段内容+source存放在.env文件里.(.env为autoenv识别的文件.它会根据.env中存在的内容自动化执行一些行为):</p>\n<pre><code class=\"language-bash\">echo \"source /Users/luz/.local/share/virtualenvs/flask-site-9FpTxb5n/bin/activate\">>.env\n</code></pre>\n<p>特别要注意.env文件开头时source,复制pipenv shell的结果时要注意.\n<em>注意:</em>当你设置.env文件后,重新用命令进入这个文件将会提示你:\n<img src=\"DraggedImage.png\">\n输入y即可.</p>","frontmatter":{"date":"December 17, 2018","title":"python的多语言版本和依赖包&隔离环境管理:pipenv+pyenv+autoenv","description":"18年期间最优的python多版本和项目库管理方式.比docker更快.比pip+virtualenv更高效简单","tags":["后端","python"]}}},"pageContext":{"id":"58c191fb-5cd2-5af0-a321-005182b633f2"}}