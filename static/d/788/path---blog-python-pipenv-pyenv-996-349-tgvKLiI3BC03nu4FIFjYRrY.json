{"data":{"markdownRemark":{"id":"d0e3d439-8a0a-50bc-873a-ba6e503eeb12","html":"<p>熟悉nodejs的同学或者使用过前端react vue等的.都知道npm yarn这样的包管理神器.而切换node全局版本也可以使用nvm.当我们创建一个项目目录执行,npm init 即拥有了一个当前目录的依赖包环境.执行yarn add 或npm install即可安装相应的依赖库. </p>\n<p>而python早期有pip,可以在全局安装依赖库,后来又拥有了virtualenv这种隔离的环境.但是都无法做到做到nodejs的方便.但是技术总是会进化的:</p>\n<p><em>开始之前我们先介绍一下pipenv,pyenv以及autoenv,可对比nodejs:</em>\n<em>pyenv:</em>类似于nvm用于安装不同版本的python语言.甚至pyenv命令也和nvm类似.\n<em>Pipenv:</em>用于取代pip和virtualenv. 她比pip拥有更强大的包管理功能.有具有virtualenv的隔离沙盒环境.它很好的将这两者合二为一了.但是pipenv依旧有缺陷,我们进入项目目录,无法自动切换沙盒环境.找到对应的安装依赖.\n<em>Autoenv:</em>autoenv正式解决pipenv唯一没有解决的难题,无需手动激活虚拟环境.进入目录即可激活!</p>\n<h2 id=\"一pipenvautoenvpyenv的安装\"><a href=\"#%E4%B8%80pipenvautoenvpyenv%E7%9A%84%E5%AE%89%E8%A3%85\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一.pipenv+autoenv+pyenv的安装</h2>\n<h4 id=\"安装pipenv\"><a href=\"#%E5%AE%89%E8%A3%85pipenv\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装pipenv</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> pipenv</code></pre></div>\n<h4 id=\"安装autoenv\"><a href=\"#%E5%AE%89%E8%A3%85autoenv\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装autoenv</h4>\n<p><em>Mac OS X 使用 Homebrew 安装</em></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> autoenv\n<span class=\"token comment\"># bash 使用这条命令</span>\n$ <span class=\"token keyword\">echo</span> <span class=\"token string\">\"source <span class=\"token variable\"><span class=\"token variable\">$(</span>brew --prefix autoenv<span class=\"token variable\">)</span></span>/activate.sh\"</span> <span class=\"token operator\">>></span> ~/.bash_profile\n<span class=\"token comment\"># zsh 使用这条命令</span>\n$ <span class=\"token keyword\">echo</span> <span class=\"token string\">\"source <span class=\"token variable\"><span class=\"token variable\">$(</span>brew --prefix autoenv<span class=\"token variable\">)</span></span>/activate.sh\"</span> <span class=\"token operator\">>></span> ~/.zshrc</code></pre></div>\n<p><em>pip安装</em></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> autoenv\n<span class=\"token comment\"># bash 使用这条命令</span>\n$ <span class=\"token keyword\">echo</span> <span class=\"token string\">\"source <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">which</span> activate.sh<span class=\"token variable\">`</span></span>\"</span> <span class=\"token operator\">>></span> ~/.bashrc\n<span class=\"token comment\"># zsh 使用这条命令</span>\n$ <span class=\"token keyword\">echo</span> <span class=\"token string\">\"source <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">which</span> activate.sh<span class=\"token variable\">`</span></span>\"</span> <span class=\"token operator\">>></span> ~/.zshrc</code></pre></div>\n<p><em>git安装</em></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone git://github.com/kennethreitz/autoenv.git ~/.autoenv\n<span class=\"token comment\"># bash 使用这条命令</span>\n$ <span class=\"token keyword\">echo</span> <span class=\"token string\">'source ~/.autoenv/activate.sh'</span> <span class=\"token operator\">>></span> ~/.bashrc\n<span class=\"token comment\"># zsh 使用这条命令</span>\n$ <span class=\"token keyword\">echo</span> <span class=\"token string\">'source ~/.autoenv/activate.sh'</span> <span class=\"token operator\">>></span> ~/.zshrc</code></pre></div>\n<h4 id=\"安装pyenv\"><a href=\"#%E5%AE%89%E8%A3%85pyenv\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装pyenv</h4>\n<p> github（有安装教程）：<a href=\"https://github.com/pyenv/pyenv\">https://github.com/pyenv/pyenv</a>\n或者使用brew：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew update\nbrew <span class=\"token function\">install</span> pyenv</code></pre></div>\n<p>接着,<em>一定要配置环境变量</em>,在.zshrc, bash_profile中添加:(如果不添加,pipenv将无法识别python版本)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">export</span> PATH<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$HOME</span>/.pyenv/bin:<span class=\"token variable\">$PATH</span>\"</span>\n<span class=\"token function\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>pyenv init -<span class=\"token variable\">)</span></span>\"</span></code></pre></div>\n<h2 id=\"二pipenvautoenvpyenv的使用\"><a href=\"#%E4%BA%8Cpipenvautoenvpyenv%E7%9A%84%E4%BD%BF%E7%94%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>二.pipenv+autoenv+pyenv的使用</h2>\n<h4 id=\"设置python版本-pyenv使用\"><a href=\"#%E8%AE%BE%E7%BD%AEpython%E7%89%88%E6%9C%AC-pyenv%E4%BD%BF%E7%94%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>设置python版本-pyenv使用:</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#安装3.6python</span>\npyenv <span class=\"token function\">install</span> 3.7.0\n <span class=\"token comment\">#查看可安装的版本</span>\npyenv <span class=\"token function\">install</span> --list\n\n<span class=\"token comment\"># 显示安装的python版本</span>\npyenv versions\n\n<span class=\"token comment\">#查看当前python版本</span>\npyenv version</code></pre></div>\n<h4 id=\"pipenv的基本使用\"><a href=\"#pipenv%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pipenv的基本使用</h4>\n<p>进入空目录,如果系统没有想要的python版本,需要用pyenv安装python版本.如果系统已有该版本,则使用pipenv 创建该版本的虚拟环境:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> <span class=\"token comment\">#查看系统中的python版本:</span>\npyenv versions\n\n* system <span class=\"token punctuation\">(</span>set by /Users/luz/.pyenv/version<span class=\"token punctuation\">)</span>\n  3.6.5\n  3.7.0\n <span class=\"token comment\"># 使用其中一个版本创建当前目录的沙盒环境</span>\npipenv --python 3.6.5</code></pre></div>\n<p>如果不需要切换语言版本,也可以这么创建沙盒环境:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  \npipenv <span class=\"token function\">install</span></code></pre></div>\n<p>这样只是创建了一个类型于node中的package.json的文件:\nPipfile  Pipfile.lock等文件.这类似npm init命令.当然有所区别,python需要手动激活Pipfile中配置的依赖关系环境:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> <span class=\"token comment\">#通过这个命令激活</span>\npipenv shell</code></pre></div>\n<p>激活才算是进入一个沙盒中的依赖环境.然后可以用pipenv 代替pip去安装当前沙盒环境的依赖包:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> <span class=\"token comment\">#通过这个命令激活</span>\npipenv <span class=\"token function\">install</span> flask django</code></pre></div>\n<p>是的flask,django都只属于当前这个沙盒环境.不信,你在pipenv后看看Pipfile中多了什么!</p>\n<h4 id=\"如何省掉手动激活进入目录就激活虚拟环境-autoenv的用法\"><a href=\"#%E5%A6%82%E4%BD%95%E7%9C%81%E6%8E%89%E6%89%8B%E5%8A%A8%E6%BF%80%E6%B4%BB%E8%BF%9B%E5%85%A5%E7%9B%AE%E5%BD%95%E5%B0%B1%E6%BF%80%E6%B4%BB%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83-autoenv%E7%9A%84%E7%94%A8%E6%B3%95\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何省掉手动激活(进入目录就激活虚拟环境)?—— autoenv的用法:</h4>\n<p>当我们在运行pipenv shell去激活沙盒环境时,系统会返回这个环境的位置:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pipenv shell\nLaunching subshell <span class=\"token keyword\">in</span> virtual environment…\n <span class=\"token keyword\">.</span> /Users/luz/.local/share/virtualenvs/flask-site-9FpTxb5n/bin/activate</code></pre></div>\n<p>使用echo命令把这段内容+source存放在.env文件里.(.env为autoenv识别的文件.它会根据.env中存在的内容自动化执行一些行为):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">echo</span> <span class=\"token string\">\"source /Users/luz/.local/share/virtualenvs/flask-site-9FpTxb5n/bin/activate\"</span><span class=\"token operator\">>></span>.env</code></pre></div>\n<p>特别要注意.env文件开头时source,复制pipenv shell的结果时要注意.\n<em>注意:</em>当你设置.env文件后,重新用命令进入这个文件将会提示你:\n<img src=\"DraggedImage.png\">\n输入y即可.</p>","headings":[{"value":"一.pipenv+autoenv+pyenv的安装","depth":2},{"value":"安装pipenv","depth":4},{"value":"安装autoenv","depth":4},{"value":"安装pyenv","depth":4},{"value":"二.pipenv+autoenv+pyenv的使用","depth":2},{"value":"设置python版本-pyenv使用:","depth":4},{"value":"pipenv的基本使用","depth":4},{"value":"如何省掉手动激活(进入目录就激活虚拟环境)?—— autoenv的用法:","depth":4}],"frontmatter":{"date":"December 17, 2018","title":"python的多语言版本和依赖包&隔离环境管理:pipenv+pyenv+autoenv","description":"18年期间最优的python多版本和项目库管理方式.比docker更快.比pip+virtualenv更高效简单","tags":["后端","python"]}}},"pageContext":{"id":"d0e3d439-8a0a-50bc-873a-ba6e503eeb12"}}