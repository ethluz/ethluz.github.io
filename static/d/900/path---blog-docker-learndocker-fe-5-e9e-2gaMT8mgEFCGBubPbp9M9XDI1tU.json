{"data":{"markdownRemark":{"id":"702c5cff-099b-5354-b43c-0a287344b871","html":"<h4 id=\"使用docker的流程\"><a href=\"#%E4%BD%BF%E7%94%A8docker%E7%9A%84%E6%B5%81%E7%A8%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用docker的流程</h4>\n<ul>\n<li>\n<p>1.cd到项目目录下(例如web网站根目录,nodejs就是package.json所在目录).</p>\n</li>\n<li>\n<p>2.编写Dockerfile(后面回介绍dockerfile的使用)</p>\n</li>\n<li>\n<p>3.创建image: (在Dockerfile所在的目录下)\t</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">\tdocker build -t  \\<span class=\"token punctuation\">{</span>image\\_name<span class=\"token punctuation\">}</span> .  \n\t```\n\n```bash\n\tdocker images #可查看有哪些image\n\t```</code></pre></div>\n</li>\n<li>\n<p>4.运行容器:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">\t<span class=\"token comment\"># 控制台执行</span>\n\tdocker run -p <span class=\"token punctuation\">{</span>系统端口<span class=\"token punctuation\">}</span>:<span class=\"token punctuation\">{</span>容器端口<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>image\\_name<span class=\"token punctuation\">}</span> <span class=\"token keyword\">.</span> \n\t<span class=\"token comment\"># 后台运行</span>\n\tdocker run -d -p <span class=\"token punctuation\">{</span>系统端口<span class=\"token punctuation\">}</span>:<span class=\"token punctuation\">{</span>容器端口<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>image\\_name<span class=\"token punctuation\">}</span> <span class=\"token keyword\">.</span> \n\t```</code></pre></div>\n</li>\n</ul>\n<h4 id=\"常用命令\"><a href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>常用命令</h4>\n<p>查看daocker正在运行的容器: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">ps</span>  \nCONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                  NAMES\n0219df69bd3d        binstd-service      <span class=\"token string\">\"pm2-runtime app.js\"</span>   45 seconds ago      Up 44 seconds       0.0.0.0:80-<span class=\"token operator\">></span>3000/tcp   competent_raman</code></pre></div>\n<p>关闭正在运行的容器 :</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> docker stop  CONTAINER_ID <span class=\"token comment\">#上面 docker ps看到的 containid</span></code></pre></div>\n<p>执行容器内的命令:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#后面的cmd可以是任意的shell命令</span>\n<span class=\"token function\">sudo</span> docker <span class=\"token function\">exec</span> -it CONTAINER_ID  cmd<span class=\"token punctuation\">..</span> </code></pre></div>\n<h4 id=\"python的docker环境\"><a href=\"#python%E7%9A%84docker%E7%8E%AF%E5%A2%83\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>python的docker环境:</h4>\n<p>Python的另一个例子,参考官方文档:\n<a href=\"https://docs.docker-cn.com/get-started/part2/\">https://docs.docker-cn.com/get-started/part2/</a></p>\n<h4 id=\"nodejs的docker环境\"><a href=\"#nodejs%E7%9A%84docker%E7%8E%AF%E5%A2%83\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nodejs的docker环境</h4>\n<p>以我在github上的koa2-mvp为例(一个集成了数据库,api,系统日志,错误处理,ES6)为一体的项目框架).</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 将官方 node:carbon 运行时用作父镜像</span>\nFROM node:carbon\n\n<span class=\"token comment\"># 收到添加pm2的方式,注意看结尾的CMD</span>\n<span class=\"token comment\"># 也可以查看文档: http://pm2.keymetrics.io/docs/usage/docker-pm2-nodejs/</span>\nRUN <span class=\"token function\">npm</span> <span class=\"token function\">install</span> pm2 -g\n\n<span class=\"token comment\"># 设置环境变量</span>\nENV NODE_ENV<span class=\"token operator\">=</span>production\n\n\n\n<span class=\"token comment\"># 将工作目录设置为 /app</span>\nWORKDIR /app\n\n<span class=\"token comment\"># 将当前目录内容复制到位于 /app  中的容器中</span>\nADD <span class=\"token keyword\">.</span> /app\n\n<span class=\"token comment\"># 如果你需要构建生产环境下的代码，请使用：</span>\n<span class=\"token comment\"># RUN npm install --only=production</span>\nRUN <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n\n<span class=\"token comment\"># 使端口 3000 可供此容器外的环境使用</span>\nEXPOSE 3000\n\n<span class=\"token comment\"># 在容器启动时运行 app.py</span>\n<span class=\"token comment\"># CMD [\"python\", \"app.py\"]</span>\n<span class=\"token comment\"># CMD [ \"npm\", \"prd\" ]</span>\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"pm2-runtime\"</span>, <span class=\"token string\">\"app.js\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>执行容器内的命令,查看容器的nodejs版本:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> docker <span class=\"token function\">exec</span> -it 0219df69bd3d node -v </code></pre></div>\n<p>辅助文档:</p>\n<h4 id=\"docker必备命令\"><a href=\"#docker%E5%BF%85%E5%A4%87%E5%91%BD%E4%BB%A4\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>docker必备命令</h4>\n<p><em>使用容器中的命令</em></p>\n<p><em>保证docker的守护进程</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token operator\">--</span>restart<span class=\"token operator\">=</span>always</code></pre></div>\n<p>附文档:\ndocker中文文档:\n<a href=\"https://docs.docker-cn.com/\">https://docs.docker-cn.com/</a></p>\n<p>docker中使用pm2+nodejs (pm2本身是守护进程+多进程分配.因此难以抛弃,因为docker开多个不同端口容器太占据资源)\n<a href=\"http://pm2.keymetrics.io/docs/usage/docker-pm2-nodejs/\">http://pm2.keymetrics.io/docs/usage/docker-pm2-nodejs/</a></p>\n<p>Dockerfile</p>","headings":[{"value":"使用docker的流程","depth":4},{"value":"常用命令","depth":4},{"value":"python的docker环境:","depth":4},{"value":"nodejs的docker环境","depth":4},{"value":"docker必备命令","depth":4}],"frontmatter":{"date":"December 17, 2017","title":"docker的使用","description":"docker安装,docker+nodejs,doker+python爬虫的使用案例,docker文档资源等","tags":["docker","后端"]}}},"pageContext":{"id":"702c5cff-099b-5354-b43c-0a287344b871"}}