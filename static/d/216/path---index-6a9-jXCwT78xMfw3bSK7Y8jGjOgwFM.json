{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"熟悉nodejs的同学或者使用过前端react vue等的.都知道npm yarn这样的包管理神器.而切换node全局版本也可以使用nvm.当我们创建一个项目目录执行,npm init 即拥有了一个当前目录的依赖包环境.执行yarn add 或npm install即可安装相应的依赖库.  而python早期有pip,可以在全局安装依赖库,后来又拥有了virtualenv这种隔离的环境.但是都无法做到做到nodejs的方便.但是技术总是会进化的: 开始之前我们先介绍一下pipenv,pyenv以及autoenv,可对比nodejs: \n pyenv: 类似于nvm用于安装不同版本的python语言.甚至pyenv命令也和nvm类似.\n Pipenv: 用于取代pip和virtualenv. 她比pip拥有更强大的包管理功能.有具有virtualenv…","id":"d0e3d439-8a0a-50bc-873a-ba6e503eeb12","fields":{"slug":"/blog/python-pipenv-pyenv/"},"frontmatter":{"title":"python的多语言版本和依赖包&隔离环境管理:pipenv+pyenv+autoenv","templateKey":"blog-post","date":"December 17, 2018"}}},{"node":{"excerpt":"理论: 以太坊1.0下采用pow共识机制,每个节点,都有区块链的数据,而在设计时考虑到不同的需求,硬件环境等,特提供了3种方式,允许节点不必完整区块数据. 同步模式: fast:  \n启动快速区块同步模式，在同步到最新区块后，转化为正常区块同步模式. full: \n同步所有区块，会拥有完整的区块链数据. Light: \n轻节点模式，只会同步区块头信息，可以完成基本的命令操作. 安装方式 官方网站: https://geth.ethereum.org/downloads/ \nUbuntu包: Mac下 homebrew: docker?(文章后面有docker的讲解) 后台运行 why? \n后台允许,允许你断开和服务器的连接(假设你的geth安装在某个主机上)后,依旧在运行同步数据.\n 方式1:nohup *方式2:pm2  * 后台运行如何启动console(和geth交互,调用geth…","id":"fa55ca1c-b380-529a-9823-a9e42a0dadec","fields":{"slug":"/blog/eth1.0-client-geth-use/"},"frontmatter":{"title":"以太坊1.0下,Geth的安装&使用&文档资源","templateKey":"blog-post","date":"December 17, 2018"}}},{"node":{"excerpt":"React是基于组件，虚拟dom的前端开发框架。 所谓基于组件即react中是一个组件嵌套一个组件，组件可复用。所谓虚拟dom，既react中的视图，是虚拟的，全部是js，而非html。 初识组件 一个组件的构成：\nimport React, { Component } from 'react' class ShoppingList extends React.Component {\n  render() {\n    return (\n       \n         Shopping List for {this.props.name} \n         \n           Instagram \n           WhatsApp \n           Oculus \n         \n       \n    );\n  }\n} 第一行中，import from 是es…","id":"1f864f41-4336-5ff1-80c8-f2f538e888f2","fields":{"slug":"/blog/react-for-dapp-1-helloworld/"},"frontmatter":{"title":"react开发dapp-1入门react","templateKey":"blog-post","date":"December 17, 2018"}}},{"node":{"excerpt":"使用docker的流程 1.cd到项目目录下(例如web网站根目录,nodejs就是package.json所在目录). 2.编写Dockerfile(后面回介绍dockerfile的使用) 3.创建image: (在Dockerfile所在的目录下)\t 4.运行容器: 常用命令 查看daocker正在运行的容器:  关闭正在运行的容器 : 执行容器内的命令: python的docker环境: Python的另一个例子,参考官方文档:\n https://docs.docker-cn.com/get-started/part2/ nodejs的docker环境 以我在github上的koa2-mvp为例(一个集成了数据库,api,系统日志,错误处理,ES6)为一体的项目框架). 执行容器内的命令,查看容器的nodejs版本: 辅助文档: docker…","id":"702c5cff-099b-5354-b43c-0a287344b871","fields":{"slug":"/blog/docker-learndocker/"},"frontmatter":{"title":"docker的使用","templateKey":"blog-post","date":"December 17, 2017"}}},{"node":{"excerpt":"必备知识点: git流程: 仓库&分支\n仓库:通常有一个链接地址,例如github的一个项目就是一个仓库:\n我们推送本地仓库提交的代码时,通常是git push origin head:master 即是将代码提交到名为origin的远程仓库. 分支:一个仓库通常有多个分支,主要用途,区分开发环境,正式环境等.以及发布不同的开源版本. **关于HEAD: **我们push时,git push origin HEAD:master 其中的HEAD实际上是指向默认分支的,他指向你git checkout xx中的xx. 场景化&命令组合 日常提交代码必备流程: 当然 git add . 和git commit 也可以简写为: 1.可以先clone空代码库,再提交代码: 2.先初始化,再提交(适用于代码库空置) 如何恢复之前的版本:(writing…) 连接多个远程仓库,并使用: 首先push…","id":"a8410122-0885-5d07-9b3b-b147397c2103","fields":{"slug":"/blog/git-use/"},"frontmatter":{"title":"Git的使用指南","templateKey":"blog-post","date":"December 17, 2017"}}}]}},"pageContext":{}}