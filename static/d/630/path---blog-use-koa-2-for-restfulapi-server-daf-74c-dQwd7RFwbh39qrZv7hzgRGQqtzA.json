{"data":{"markdownRemark":{"id":"2b4eaaab-506e-59d4-b5f2-15f5a9e31493","html":"<p>如题,koa本身只包含基础的接受请求返还请求.所有的其他功能都通过洋葱中间件模型实现.\n我刚好实现了一个扩展koa2本身功能,满足服务端快速开发的框架.在我看来完备的服务端开发框架,需要满足:快速的数据库改建,对用户请求类型参数的完整的处理,系统日志,异常错误的处理.一定程度的分层是必须的,规划统一的开发方式也是必须的.</p>\n<h2 id=\"0前置知识点\"><a href=\"#0%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E7%82%B9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0.前置知识点</h2>\n<p>koa的基础知识,例如:ctx作用.\nEs6语法:知道回调函数,知道primise的用法,例如then.最新的同步异步处理,如\nNvm安装配置,npm的常用命令. </p>\n<h2 id=\"1初始化koa2\"><a href=\"#1%E5%88%9D%E5%A7%8B%E5%8C%96koa2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.初始化koa2</h2>\n<p>前置条件:安装nvm(nodejs多版本神器),然后切换版本,到8.11以上版本.\n<em>创建新目录,然后npm包创建项目:(你也可以使用yarn)</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm init</code></pre></div>\n<p>项目初始化完成后,会生成package.json.于是你应该就是明白,这个json目录咋回事了..然后以后每次使用npm install xx -save(使用npm安装xx模块,并保存到当前目录).</p>\n<p>Package.json文件就会有更改.当然当前目录下还会有node_module专门存储项目所安装的模块.\n<em>我们可以安装 Koa（观察 package.json中的变化）</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install koa -save</code></pre></div>\n<p><em>当前项目目录下,创建app.js文件,写代码:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Koa = require(&#39;koa&#39;)\nconst app = new Koa() \napp.use(async (ctx, next) =&gt; { \n\tawait next() \n\tctx.response.type = &#39;text/html&#39; ctx.response.body = &#39;&lt;h1&gt;Hello koa!&lt;/h1&gt;&#39;\n\n}) app.listen(3000, () =&gt; { console.log(&#39;server is running at http://localhost:3000&#39;)\n})</code></pre></div>\n<p>运行node app.js，浏览器中打开<code class=\"language-text\">http://localhost:3000&#39;</code>显示: <code class=\"language-text\">Hello koa!</code> 。</p>\n<h2 id=\"2实现路由controller简单的代码分层\"><a href=\"#2%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1controller%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E5%88%86%E5%B1%82\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.实现路由&#x26;controller&#x26;简单的代码分层</h2>\n<p> 安装router,并划分目录结构,可参考我的提交:\n<a href=\"https://github.com/ethluz/koa2-apiserver-mvp/commit/c855b769a801e3825943fa83f9dc65f949e70171\">https://github.com/ethluz/koa2-apiserver-mvp/commit/c855b769a801e3825943fa83f9dc65f949e70171</a>\n代码目录结构如下:\n<img src=\"DraggedImage.png\">\n具体步骤(代码就不粘贴了,github上有提交)\n需要安装:koa-router模块,然后创建:router.js\n<a href=\"https://github.com/ethluz/koa2-apiserver-mvp/blob/c855b769a801e3825943fa83f9dc65f949e70171/router.js\">https://github.com/ethluz/koa2-apiserver-mvp/blob/c855b769a801e3825943fa83f9dc65f949e70171/router.js</a>\nrouterjs中引入了controller,于是就涉及到创建controller目录,添加home.js:\n<a href=\"https://github.com/ethluz/koa2-apiserver-mvp/tree/c855b769a801e3825943fa83f9dc65f949e70171/controller\">https://github.com/ethluz/koa2-apiserver-mvp/tree/c855b769a801e3825943fa83f9dc65f949e70171/controller</a>\n最后还要在app.js中载入router中间件.</p>\n<h2 id=\"3借助babel实现es6-style的koa\"><a href=\"#3%E5%80%9F%E5%8A%A9babel%E5%AE%9E%E7%8E%B0es6-style%E7%9A%84koa\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.借助babel&#x26;实现es6 style的koa</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i babel-core  babel-polyfill babel-preset-env babel-preset-es2015  babel-preset-stage-0  -S </code></pre></div>\n<p>在app.js最上方添加如下代码.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">require(&quot;babel-core/register&quot;)({  \n    presets: [&#39;env&#39;, &#39;stage-0&#39;]\n});\nrequire(&quot;babel-polyfill&quot;); </code></pre></div>\n<p>Ps:如果你直接用node.js10以上版本,将自带es6的支持,可跳过上面的配置(主要还是import from, async,await,let,const nodejs8也能支持).</p>\n<p>完整的代码可查看,如下提交:\n<a href=\"https://github.com/ethluz/koa2-apiserver-mvp/commit/d3c1cad77761717809c29a5163abfd8d8bd41c63\">https://github.com/ethluz/koa2-apiserver-mvp/commit/d3c1cad77761717809c29a5163abfd8d8bd41c63</a>\n这样就可以放心的使用es6语法糖了.</p>\n<h2 id=\"4实现中间件\"><a href=\"#4%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BB%B6\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.实现中间件</h2>\n<p>其实在上面的router使用中,我们就可以把koa-ruoter当作中间件,实际上所有的app.use 都是载入中间件的方式:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 示例:载入 bodyparser中间件\n  \tapp.use(bodyParser())</code></pre></div>\n<p>但我们需要考虑代码分层,提升整个koa服务端的拓展性,代码可读性.</p>\n<p><em>中间件扩展</em>\n设计的思路:\n1.我们不能把所有的app.use都写在app.js中,需要分层. 2.app.use(function())  需要摒弃.同样的把每个拓展都单独写在各自文件里,于是:\n首先创建了middleware目录,然后创建一个中间件mi-send(用于解析json,返回给客户端).\nmi-send目录中创建index.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      ctx<span class=\"token punctuation\">.</span>send <span class=\"token operator\">=</span> render<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在middleware目录下创建一个,index.js用于集中载入中间件:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-bodyparser'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> nunjucks <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-nunjucks-2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> staticFiles <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-static'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> miSend <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mi-send'</span><span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">staticFiles</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">nunjucks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    ext<span class=\"token punctuation\">:</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    nunjucksConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      trimBlocks<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">bodyParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">miSend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>修改app.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./router'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./middleware'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n<span class=\"token function\">router</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server is running at http://localhost:3000'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ok,中间件的目录就创建完成了,然后我们修改home.js,在其中一个controller调用这个中间件:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n       status<span class=\"token punctuation\">:</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span>\n       data<span class=\"token punctuation\">:</span> <span class=\"token string\">'流量'</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>浏览器打开,就能看到效果了.这意味着,你刚刚使用中间件send拓展了ctx对象.</p>\n<p>Ps:目录结构如下:\n<img src=\"DraggedImage-1.png\">\n代码提交记录:\n<a href=\"https://github.com/ethluz/koa2-apiserver-mvp/commit/ce9f295c05d9a1dfa487a60584ccff93bd9e402e\">https://github.com/ethluz/koa2-apiserver-mvp/commit/ce9f295c05d9a1dfa487a60584ccff93bd9e402e</a></p>\n<h3 id=\"4实时反馈的node启动开发环境变量\"><a href=\"#4%E5%AE%9E%E6%97%B6%E5%8F%8D%E9%A6%88%E7%9A%84node%E5%90%AF%E5%8A%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.实时反馈的node启动&#x26;开发环境变量&#x26;</h3>\n<p><em>代码修改的实时反馈</em>\n实时反馈即代码修改后,可用自动启动node,而无法手动退出当前node,重启服务.\n我们这里用nodemon,首先安装它</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i nodemon -save</code></pre></div>\n<p>然后修改package.json的scripts:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"node app.js\"</span></code></pre></div>\n<p>改为:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"nodemon app.js\"</span></code></pre></div>\n<p><em>环境变量-区分开发环境&#x26;线上环境本地等</em>\n如果我们的产品是开源代码的,又或者区分正式环境和测试环境(几乎肯定是要分的).那他们所连接的数据库,一些配置就必然不一致,如果直接去改代码就不合适了.\n而nodejs提供了node_env 切好就是直面这个问题的.我们继续修改package.json的scripts:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"export NODE_ENV=dev &amp;&amp; nodemon app.js\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"prd\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"export NODE_ENV=product &amp;&amp; nodemon app.js\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>这样运行 npm run start就是启动开发环境,而prd则是正式环境了.然而还有一个问题,命令是不同了,但是代码里如何获取node_env的值呢?\n在app.js底部添加下面的代码,运行时,看shell中的输出即可:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n app.env: \\n'</span><span class=\"token punctuation\">,</span>app<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n app.env: \\n'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>app.env是koa提供的获取环境变量的对象属性.</p>\n<p><em>model层:sequelize+postgresql的使用</em>\nsequelize能支持mysql,postgre和mongodb等.并提供几乎一致的orm.且具备足够的易用性影响力,因此推荐.\n<em>sequelize的配置:</em>\n我们创建db.js保存Sequelize的初始化和基本配置</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Sequelize <span class=\"token keyword\">from</span> <span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据库名'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'账户'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    host<span class=\"token punctuation\">:</span> <span class=\"token string\">'连接主机'</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">5432</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//端口</span>\n    dialect<span class=\"token punctuation\">:</span> <span class=\"token string\">'postgres'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//数据库,这里我们用postgre,你也可以选择mysql</span>\n    dialectOptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        ssl<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>   <span class=\"token comment\">//适用于postgre非常关键,远程连接postgre需要通过ssl</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pool<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        max<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n        min<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        idle<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsequelize<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> sequelize<span class=\"token punctuation\">;</span></code></pre></div>\n<p>这部分也推荐看文档:<a href=\"https://demopark.github.io/sequelize-docs-Zh-CN/getting-started.html\">https://demopark.github.io/sequelize-docs-Zh-CN/getting-started.html</a></p>\n<p>有了上面,其实还没完,我们还要创建Model:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Sequelize <span class=\"token keyword\">from</span> <span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>sequelize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    password<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      allowNull<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      type<span class=\"token punctuation\">:</span> Sequelize<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n      unique<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      validate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> isLowercase<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> Sequelize<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n      unique<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注:上面的代码并不需要创建id和createtime,因为sequelize会为我们自动添加上默认的.\nModel的创建也可以查看文档:<a href=\"https://demopark.github.io/sequelize-docs-Zh-CN/models-definition.html\">https://demopark.github.io/sequelize-docs-Zh-CN/models-definition.html</a></p>\n<p>然后我们需要在最上面的db.js中载入这个model:\nimport 上面的model:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> users <span class=\"token keyword\">from</span> <span class=\"token string\">'./models/users.model'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后把初始化的sequelize对象传入model function中:(很明显的用了闭包):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">users(sequelize);</code></pre></div>\n<p>那么如何用到这个model呢,我们在需要使用数据库的controller头部添加如下代码:<strong>这里需要注意下sequelize.models.xx那一行,你在文档中很难察觉,切记</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> sequelize <span class=\"token keyword\">from</span> <span class=\"token string\">'../db'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//注意下面这个属性:</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> sequelize<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">;</span></code></pre></div>\n<p>sequelize.models.xx可以获取我们刚刚的users model对象,然后我们就可以随意的使用users.save() user.findAll()等等调取user对象的方法了. sequelize对model定义了哪些方法?请看:<a href=\"https://demopark.github.io/sequelize-docs-Zh-CN/models-usage.html\">https://demopark.github.io/sequelize-docs-Zh-CN/models-usage.html</a></p>\n<p><em>sequelize的一点资料</em>\n中文文档:\n<a href=\"https://demopark.github.io/sequelize-docs-Zh-CN/\">https://demopark.github.io/sequelize-docs-Zh-CN/</a>\n官方英文文档;</p>\n<p><em>添加日志功能</em>\n新安装log4js模块用于管理系统日志.新增加日常中间件,并在middleware/inde.js中加载中间件. 运行将增加日志文件到当前目录.\n<a href=\"https://github.com/ethluz/koa2-apiserver-mvp/commit/fc90832a468a0162c3aa6c27a23afcc0a782463f\">https://github.com/ethluz/koa2-apiserver-mvp/commit/fc90832a468a0162c3aa6c27a23afcc0a782463f</a></p>\n<p><em>把日志中间件挂载到ctx&#x26;中间件的调用</em>\n<a href=\"https://github.com/ethluz/koa2-apiserver-mvp/commit/7a6083729041c71e26397fcef9ebda4a49b242a7\">https://github.com/ethluz/koa2-apiserver-mvp/commit/7a6083729041c71e26397fcef9ebda4a49b242a7</a></p>\n<p><em>完善日志功能,按日期分割日志文件,并设置专有目录</em>\n<a href=\"https://github.com/ethluz/koa2-apiserver-mvp/commit/7195a00b4a0b176b8f58a155fcbcac7ebad0944d\">https://github.com/ethluz/koa2-apiserver-mvp/commit/7195a00b4a0b176b8f58a155fcbcac7ebad0944d</a></p>\n<p><em>灵活的日志配置及添加客户端信息到日志</em>\n<a href=\"https://github.com/ethluz/koa2-apiserver-mvp/commit/0204d238ebbead351db2c9bb92a2adb247953fb1\">https://github.com/ethluz/koa2-apiserver-mvp/commit/0204d238ebbead351db2c9bb92a2adb247953fb1</a>\n<em>记录用户ip</em>\n<a href=\"https://github.com/ethluz/koa2-apiserver-mvp/commit/36c4a66fc7eaae80b1cdda839fa51767c53799c8\">https://github.com/ethluz/koa2-apiserver-mvp/commit/36c4a66fc7eaae80b1cdda839fa51767c53799c8</a></p>","fields":{"slug":"/blog/use-koa2-for-restfulapi-server/"},"headings":[{"value":"0.前置知识点","depth":2},{"value":"1.初始化koa2","depth":2},{"value":"2.实现路由&controller&简单的代码分层","depth":2},{"value":"3.借助babel&实现es6 style的koa","depth":2},{"value":"4.实现中间件","depth":2},{"value":"4.实时反馈的node启动&开发环境变量&","depth":3}],"frontmatter":{"date":"December 17, 2017","title":"把koa2扩展成一个完备服务端api开发框架","description":"将koa2做成一个易用开发的api框架:快速的数据库model层,对用户请求类型参数的完整的处理,系统日志,异常错误的处理.一定程度的分层是必须的","tags":["nodejs","后端"]}}},"pageContext":{"id":"2b4eaaab-506e-59d4-b5f2-15f5a9e31493"}}