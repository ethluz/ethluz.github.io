{"data":{"markdownRemark":{"id":"5be66d87-1527-55a7-86c7-d15c3bfe6ae6","html":"<h2>理论:</h2>\n<p>以太坊1.0下采用pow共识机制,每个节点,都有区块链的数据,而在设计时考虑到不同的需求,硬件环境等,特提供了3种方式,允许节点不必完整区块数据.</p>\n<h1>同步模式:</h1>\n<ul>\n<li><em>fast:</em>\n启动快速区块同步模式，在同步到最新区块后，转化为正常区块同步模式.</li>\n<li><em>full:</em>\n同步所有区块，会拥有完整的区块链数据.</li>\n<li><em>Light:</em>\n轻节点模式，只会同步区块头信息，可以完成基本的命令操作.</li>\n</ul>\n<h2>实战</h2>\n<h4>安装方式:</h4>\n<p>官方网站:<a href=\"https://geth.ethereum.org/downloads/\">https://geth.ethereum.org/downloads/</a>\nUbuntu包:</p>\n<pre><code class=\"language-js\">sudo add-apt-repository -y ppa:ethereum/ethereum\n\nsudo apt-get update\nsudo apt-get install ethereum\n</code></pre>\n<p>Mac下 homebrew:</p>\n<pre><code class=\"language-js\">brew tap ethereum / ethereum\nbrew install ethereum\n</code></pre>\n<p>docker?(文章后面有docker的讲解)</p>\n<h4>后台运行:</h4>\n<p><strong>why?</strong>\n后台允许,允许你断开和服务器的连接(假设你的geth安装在某个主机上)后,依旧在运行同步数据.\n<em>方式1:nohup</em></p>\n<pre><code class=\"language-js\">nohup  geth --datadir \"./data\" &#x26;\n</code></pre>\n<p>*方式2:pm2  *</p>\n<pre><code class=\"language-js\">pm2  geth --datadir \"./data\" &#x26;\n</code></pre>\n<p><em>后台运行如何启动console(和geth交互,调用geth命令)</em></p>\n<pre><code class=\"language-bash\">geth attach ipc:./data/geth.ipc\n</code></pre>\n<p>ipc后面的部分根据上面 启动时,--datadir的目录而定.千万别造抄.如果我们上的—datadir 目录是”/” ,那么我在这里ipc后面接着的应该是:ipc:/geth.ipc</p>\n<h4>普通运行:(进程关闭,则停止)</h4>\n<pre><code class=\"language-js\">geth --datadir \"./data\" \n</code></pre>\n<h4>使用场景角度使用geth启动参数</h4>\n<p>其次geth有一堆命令,我们按场景来定,如我们想再ropsten网络上启用快速的节点,并且后台运行,则:</p>\n<pre><code class=\"language-bash\"> \nnohup geth --datadir \"~/data\" --syncmode \"fast\" --testnet &#x26; \n</code></pre>\n<p>如果还想让它启用rpc接口,并且开发一些api,rpc的端口想设定为8080,则:</p>\n<pre><code class=\"language-bash\">nohup geth --datadir \"~/data\" --syncmode \"fast\" --rpc  --rpcapi \"db,eth,net,web3\" --rpcport \"8080\" --testnet &#x26; \n</code></pre>\n<p>如果我们不后台运行呢?(去掉nohup和&#x26;)</p>\n<pre><code class=\"language-bash\">geth --datadir \"~/data\" --syncmode \"fast\" --rpc  --rpcapi \"db,eth,net,web3\" --rpcport \"8080\" --testnet \n</code></pre>\n<h4>console常用命令:</h4>\n<p><em>查看区块同步状况</em></p>\n<pre><code class=\"language-bash\">eth.syncing\n</code></pre>\n<p>这个命令会返回false或者一个同步状态的数组;有两种情况会返回false，一是还没找到任何节点，并且没有开始同步，二是找到节点了并且已经同步到最高块;如果返回数组则表示正在同步，并输出最高块和当前同步的块高</p>\n<p><em>查看当前同步的区块高度</em></p>\n<pre><code class=\"language-bash\">eth.blockNumber\n</code></pre>\n<h4>特别说明docker下:</h4>\n<p>docker下,pull此镜像:</p>\n<pre><code class=\"language-bash\">docker pull ethereum/client-go\n</code></pre>\n<p>如何启用?</p>\n<pre><code class=\"language-bash\">docker run -it -p 30303:30303 ethereum/client-go\n</code></pre>\n<p>如上面的命令,我们启动了 geth在正式网的挖矿. 其中30303:30303为端口映射.\n既将docker中的端口映射到主机本身的端口上. </p>\n<p>如何添加geth启动的参数呢?如正式网,测试网呢?</p>\n<p>关于docker的使用,可我写的这篇文章:<a href=\"https://ethluz.github.io/blog/docker-learndocker/\">https://ethluz.github.io/blog/docker-learndocker/</a></p>\n<h2>其他关于geth的资料:</h2>\n<h4>Rpc相关的API wiki(官方):</h4>\n<p><a href=\"https://github.com/ethereum/wiki/wiki\">https://github.com/ethereum/wiki/wiki</a></p>\n<h4>使用golang开发geth的拓展(学习go语言区块链开发)</h4>\n<p><a href=\"https://goethereumbook.org/\">https://goethereumbook.org/</a></p>\n<h4>读取geth等以太坊客户端的数据,为交易数据查询服务:</h4>\n<p><em>1.EtherSQL：Python脚本</em>\n抓取节点数据，并保存到postgresql上，可使用sql查询区块链数据，主要依赖：web3.py， SqlAlchemy等库。</p>\n<ul>\n<li>下载：<a href=\"https://github.com/analyseether/ether_sql\">https://github.com/analyseether/ether_sql</a></li>\n<li>文档：<a href=\"https://ether-sql.readthedocs.io\">https://ether-sql.readthedocs.io</a></li>\n</ul>\n<p><em>2.Presto-Ethereum：以太坊客户端的Presto连接器</em>\n来自雅虎的华人工程师，java所写，用这个连接器，人们就可以开始使用以太坊区块链分析工作，而无需知道如何使用细节Javascript API。</p>\n<ul>\n<li>文档和安装：<a href=\"https://github.com/xiaoyao1991/presto-ethereum\">https://github.com/xiaoyao1991/presto-ethereum</a></li>\n</ul>\n<h4>Geth源码解读</h4>\n<p><a href=\"https://github.com/ZtesoftCS/go-ethereum-code-analysis\">https://github.com/ZtesoftCS/go-ethereum-code-analysis</a></p>","frontmatter":{"date":"December 17, 2018","title":"以太坊1.0下,Geth的安装&使用&文档资源","description":"以太坊1.0下,Geth在不同环境下的安装,启动命令,docker下的使用,以及geth的开发资源,文档等.","tags":["区块链","服务端","以太坊"]}}},"pageContext":{"id":"5be66d87-1527-55a7-86c7-d15c3bfe6ae6"}}