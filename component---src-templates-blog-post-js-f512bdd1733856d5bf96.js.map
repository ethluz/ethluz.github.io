{"version":3,"sources":["webpack:///./src/components/Layoutcontent.js","webpack:///./src/components/docs/Sidebar.js","webpack:///./src/templates/blog-post.js"],"names":["theme","monospace","tablet","mobile","colors","primary","text","TemplateWrapper","_ref","children","react_default","a","createElement","Helmet_default","title","Navbar","styled_components_browser_esm","Wrapper","styled","aside","withConfig","displayName","componentId","props","List","ul","ListItem","li","depth","defaultProps","Divider","Sidebar","headings","extras","slugger","slug","GithubSlugger","mainHeaders","filter","_ref2","length","keys","map","_ref3","value","twoslug","key","href","isEmpty","__webpack_require__","d","__webpack_exports__","pageQuery","Documentation","main","DocContents","div","monspace","DocHeader","header","BlogPost","post","data","markdownRemark","pickBy","mapKeys","pick","frontmatter","identity","Layoutcontent","description","dangerouslySetInnerHTML","__html","html"],"mappings":"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","file":"component---src-templates-blog-post-js-f512bdd1733856d5bf96.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport  { ThemeProvider } from 'styled-components'\nimport './all.sass'\nimport './styles.css'\nimport Navbar from '../components/Navbar'\nconst theme = {\n  monospace: `'Source Code Pro', monospace`,\n  tablet: `only screen and (max-width: 800px)`,\n  mobile: `only screen and (max-width: 650px)`,\n  colors: {\n    primary: '#2097e4',\n    text: '#333',\n  },\n}\n\nconst TemplateWrapper = ({ children }) => (\n    <div>\n        <Helmet title=\"luz-blog\" />  \n        <Navbar />\n        <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </div>\n  )\n  \n  export default TemplateWrapper","import React from 'react'\nimport { map, keys, isEmpty } from 'lodash'\nimport GithubSlugger from 'github-slugger'\nimport styled from 'styled-components'\nimport { Link } from \"gatsby\"\n\nconst Wrapper = styled.aside`\n  position: fixed;\n  top: 0;\n  padding: 64px 2em 2em 2em;\n  width: 20%;\n  overflow: auto;\n  right: 0;\n\n  @media ${props => props.theme.mobile} {\n    display: none;\n  }\n`\nconst List = styled.ul`\n  padding: 2rem 0;\n  display: block;\n  color: #666;\n  font-size: 0.875rem;\n  list-style: none;\n`\n\nconst ListItem = styled.li`\n  margin: 0 0 0.5rem ${props => props.depth - 2}rem;\n\n  a {\n    color: inherit;\n    font: inherit;\n    text-decoration: none;\n  }\n`\nListItem.defaultProps = { depth: 2 }\n\nconst Divider = styled.li`\n  margin: 1em 0 1em 0;\n  border-top: 2px dashed #f0f0f0;\n`\n\nexport default ({ headings, extras, slug }) => {\n  const slugger = new GithubSlugger()\n  const mainHeaders = headings.filter(({ depth }) => depth <= 2)\n  if (mainHeaders.length + keys(extras).length < 2) return <aside />\n    \n  return (\n    <Wrapper>\n      <List>\n        {mainHeaders.map(({ value, depth }) => {\n          const twoslug = slugger.slug(value)\n          console.log(twoslug);\n          return (\n            <ListItem key={twoslug} depth={depth}>\n              <a href={`#${twoslug}`}>{value}</a>\n              {/* <Link to={`${slug}#${twoslug}`}  >{value}</Link> */}\n            </ListItem>\n          )\n        })}\n        {isEmpty(extras) ? '' : <Divider />}\n        {map(extras, (href, text) => (\n          <ListItem key={href}>\n            <a href={`#${href}`}>{text}</a>\n          </ListItem>\n        ))}\n      </List>\n    </Wrapper>\n  )\n}\n\n","import React from 'react'\nimport Helmet from 'react-helmet'\n// import Link from 'gatsby-link'\nimport { pickBy, mapKeys, pick, identity } from 'lodash'\n//import styled, { injectGlobal } from 'styled-components'\nimport styled from 'styled-components'\n\nimport { graphql } from 'gatsby'\n// import PropTypes from 'prop-types'\n\nimport Layout from '../components/Layoutcontent'\nimport Sidebar from '../components/docs/Sidebar'\n\n\n\nconst Documentation = styled.main`\n  float: left;\n  width: 60%;\n  margin-left: 20%;\n  padding: 2em 4em;\n\n  @media ${props => props.theme.mobile} {\n    width: 100%;\n    margin: 0;\n  }\n`\n\nconst DocContents = styled.div`\n  /**\n   * Code ðŸ’»\n   */\n  code {\n    background: #f4f7fb;\n    padding: 0 0.25em;\n    font-size: 0.95em;\n    border-radius: 3px;\n    font-family: ${props => props.theme.monspace};\n  }\n\n  .gatsby-highlight pre {\n    background: #f9fbfd;\n    border: 1px solid #ececec;\n    border-radius: 3px;\n    padding: 0.5em 1em;\n    overflow: auto;\n    margin: 0 0 1em 0;\n  }\n\n  .gatsby-highlight code {\n    background: none;\n    color: inherit;\n    padding: 0;\n    border-radius: 0;\n  }\n\n  /**\n   * Tables \n   */\n  table {\n    border: 1px solid #ececec;\n    overflow: hidden;\n    border-collapse: separate;\n    border-spacing: 0;\n    width: 100%;\n    margin: 1em 0;\n    border-radius: 3px;\n  }\n\n  th {\n    font-weight: 600;\n  }\n\n  h3 {\n    margin: 0.5em 0;\n  }\n\n  th:empty {\n    display: none;\n  }\n\n  td,\n  th {\n    text-align: left;\n    padding: 0.375em 0.75em 0.375em 0.75em;\n  }\n\n  td {\n    line-height: 1.75em;\n    vertical-align: top;\n  }\n\n  .bordered-table table {\n    border-width: 0 1px 1px 0;\n  }\n\n  .bordered-table td,\n  .bordered-table th {\n    border: 1px solid #ececec;\n    border-right: 0;\n    border-bottom-width: 0;\n  }\n\n  .fixed-table table {\n    table-layout: fixed;\n  }\n\n  .attributes-table td {\n    line-height: 1.5em;\n  }\n\n  .attributes-table td:first-child {\n    text-align: right;\n    line-height: 1em;\n  }\n\n  .attributes-table strong {\n    white-space: nowrap;\n  }\n\n  small {\n    color: #888;\n    display: block;\n    margin-top: 0.25em;\n    font-size: 0.875em;\n    font-weight: 400;\n    line-height: 1em;\n  }\n\n  img {\n    display: block;\n    margin: 2rem auto;\n    max-width: 600px;\n    width: 98%;\n  }\n`\n\nconst DocHeader = styled.header`\n  padding: 0 0 0.25em 0;\n  margin-bottom: 1.5em;\n  border-bottom: 2px solid #f0f0f0;\n\n  h1 {\n    margin-top: 0;\n    margin-bottom: 0.5em;\n  }\n`\n\nconst BlogPost = ({ data }) => {\n  const { markdownRemark: post } = data;\n  const extras = pickBy(\n    mapKeys(\n      pick(post.frontmatter, ['tests', 'issues', 'edit']),\n      (href, text) => {\n        switch (text) {\n          case 'tests':\n            return 'Litmus Tests'\n\n          case 'issues':\n            return 'Report a Bug'\n\n          case 'edit':\n            return 'Edit this Page'\n          default:\n            console.log('moren')\n        }\n      }\n    ),\n    identity\n  )\n//   console.log(post.headings);\n//   console.log(extras);\n//   console.log(post.tableOfContents.toc);\n  return (\n     <Layout>\n         <div>\n         {/* 11111 */}\n         {/* <ThemeProvider theme={theme}> */}\n         {/* <React.Fragment> */}\n            <Helmet>\n                <title>{post.frontmatter.title} &middot;  Blog </title>\n            </Helmet>\n        \n            <Documentation>\n                <DocHeader>\n                <   h1>{post.frontmatter.title}</h1>\n                { post.frontmatter.description ? <p>{post.frontmatter.description}</p> : ''}\n                </DocHeader>\n                <DocContents dangerouslySetInnerHTML={{ __html: post.html }} />\n            </Documentation>\n            <Sidebar headings={post.headings} extras={extras}  />\n            {/* </React.Fragment> */}\n         {/* </ThemeProvider> */}\n        </div>\n    </Layout>\n\n  )\n}\n\nexport default BlogPost\n\nexport const pageQuery = graphql`\n  query BlogPostByID($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      id\n      html\n      fields {\n        slug\n      }\n      headings {\n        value\n        depth\n      }\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        description\n        tags\n      }\n    }\n  }\n`\n\n\n// import React from 'react'\n// import PropTypes from 'prop-types'\n// import { kebabCase } from 'lodash'\n// import Helmet from 'react-helmet'\n// import { graphql, Link } from 'gatsby'\n// import Layout from '../components/Layout'\n// import Content, { HTMLContent } from '../components/Content'\n\n// export const BlogPostTemplate = ({\n//   content,\n//   contentComponent,\n//   description,\n//   tags,\n//   title,\n// //   helmet,\n// }) => {\n//   const PostContent = contentComponent || Content\n\n//   return (\n//     <section className=\"section\">\n//          <Helmet title={`${title} | Blog`} />\n//       {/* {helmet || ''} */}\n//       <div className=\"container content\">\n//         <div className=\"columns\">\n//           <div className=\"column is-10 is-offset-1\">\n//             <h1 className=\"title is-size-2 has-text-weight-bold is-bold-light\">\n//               {title}\n//             </h1>\n//             {/* <p>{description}</p> */}\n//             <PostContent content={content} />\n//             {tags && tags.length ? (\n//               <div style={{ marginTop: `4rem` }}>\n//                 <h4>Tags</h4>\n//                 <ul className=\"taglist\">\n//                   {tags.map(tag => (\n//                     <li key={tag + `tag`}>\n//                       <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\n//                     </li>\n//                   ))}\n//                 </ul>\n//               </div>\n//             ) : null}\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   )\n// }\n\n// BlogPostTemplate.propTypes = {\n//   content: PropTypes.node.isRequired,\n//   contentComponent: PropTypes.func,\n//   description: PropTypes.string,\n//   title: PropTypes.string,\n// //   helmet: PropTypes.instanceOf(Helmet),\n// }\n\n// const BlogPost = ({ data }) => {\n//   const { markdownRemark: post } = data\n\n//   return (\n//     <Layout>\n//       <BlogPostTemplate\n//         content={post.html}\n//         contentComponent={HTMLContent}\n//         description={post.frontmatter.description}\n//         // helmet={<Helmet title={`${post.frontmatter.title} | Blog`} />}\n//         tags={post.frontmatter.tags}\n//         title={post.frontmatter.title}\n//       />\n//     </Layout>\n//   )\n// }\n\n// BlogPost.propTypes = {\n//   data: PropTypes.shape({\n//     markdownRemark: PropTypes.object,\n//   }),\n// }\n\n// export default BlogPost\n\n// export const pageQuery = graphql`\n//   query BlogPostByID($id: String!) {\n//     markdownRemark(id: { eq: $id }) {\n//       id\n//       html\n//       frontmatter {\n//         date(formatString: \"MMMM DD, YYYY\")\n//         title\n//         description\n//         tags\n//       }\n//     }\n//   }\n// `"],"sourceRoot":""}